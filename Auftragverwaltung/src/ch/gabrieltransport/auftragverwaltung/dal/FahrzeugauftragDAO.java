
package ch.gabrieltransport.auftragverwaltung.dal;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.ParameterExpression;
import javax.persistence.criteria.Root;
import org.hibernate.Session;

import com.xdev.dal.JPADAO;

import ch.gabrieltransport.auftragverwaltung.entities.Anhaenger;
import ch.gabrieltransport.auftragverwaltung.entities.Auftrag;
import ch.gabrieltransport.auftragverwaltung.entities.Fahrzeug;
import ch.gabrieltransport.auftragverwaltung.entities.Fahrzeugauftrag;
import ch.gabrieltransport.auftragverwaltung.entities.Fahrzeugauftrag_;

/**
 * Home object for domain model class Fahrzeugauftrag.
 * 
 * @see Fahrzeugauftrag
 */
public class FahrzeugauftragDAO extends JPADAO<Fahrzeugauftrag, Integer> {
	public FahrzeugauftragDAO() {
		super(Fahrzeugauftrag.class);
	}
	
	@SuppressWarnings("unchecked")
	public List<Fahrzeugauftrag> findAuftrageon(LocalDateTime date, Fahrzeug fahrzeug) {
		
		LocalTime midnight = LocalTime.MAX;
		LocalDate today = date.toLocalDate();
		LocalDateTime dateUntil = LocalDateTime.of(today, midnight);
		
		Session session = this.getSession(); 
		String hql = "Select fa FROM Fahrzeugauftrag fa " + 
				"where fa.fahrzeug = :fahrzeug and " + 
				"((:dateFrom BETWEEN fa.vonDatum AND fa.bisDatum OR :dateUntil BETWEEN fa.vonDatum AND fa.bisDatum) " +
				"OR (fa.vonDatum BETWEEN :dateFrom AND :dateUntil OR fa.bisDatum BETWEEN :dateFrom AND :dateUntil))"
				+ " ORDER BY fa.vonDatum";
		List<Fahrzeugauftrag> auftraege = session.createQuery(hql)
				.setParameter("fahrzeug", fahrzeug)
				.setParameter("dateFrom",date)
				.setParameter("dateUntil", dateUntil)
				.list();		
		return auftraege;
	}
	
	@SuppressWarnings("unchecked")
	public List<Fahrzeugauftrag> findAuftrageon(LocalDateTime date, Anhaenger anhaenger) {
		
		LocalTime midnight = LocalTime.MAX;
		LocalDate today = date.toLocalDate();
		LocalDateTime dateUntil = LocalDateTime.of(today, midnight);
		
		Session session = this.getSession(); 
		String hql = "Select fa FROM Fahrzeugauftrag fa " + 
				"where fa.anhaenger = :anhaenger and " + 
				"((:dateFrom BETWEEN fa.vonDatum AND fa.bisDatum OR :dateUntil BETWEEN fa.vonDatum AND fa.bisDatum) " +
				"OR (fa.vonDatum BETWEEN :dateFrom AND :dateUntil OR fa.bisDatum BETWEEN :dateFrom AND :dateUntil))"
				+ " ORDER BY fa.vonDatum";
		List<Fahrzeugauftrag> auftraege = session.createQuery(hql)
				.setParameter("anhaenger", anhaenger)
				.setParameter("dateFrom",date)
				.setParameter("dateUntil", dateUntil)
				.list();		
		return auftraege;
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Fahrzeugauftrag> findTasksBetween(LocalDateTime fromDate, LocalDateTime untilDate) {
		EntityManager entityManager = em();
	
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		ParameterExpression<LocalDateTime> fromDateParameter = criteriaBuilder.parameter(LocalDateTime.class, "fromDate");
		ParameterExpression<LocalDateTime> untilDateParameter = criteriaBuilder.parameter(LocalDateTime.class, "untilDate");
	
		CriteriaQuery<Fahrzeugauftrag> criteriaQuery = criteriaBuilder.createQuery(Fahrzeugauftrag.class);
	
		Root<Fahrzeugauftrag> root_fa = criteriaQuery.from(Fahrzeugauftrag.class);
		root_fa.alias("fa");
	
		criteriaQuery.where(criteriaBuilder.or(
				criteriaBuilder.or(
						criteriaBuilder.between(fromDateParameter, root_fa.get(Fahrzeugauftrag_.vonDatum),
								root_fa.get(Fahrzeugauftrag_.bisDatum)),
						criteriaBuilder.between(fromDateParameter, root_fa.get(Fahrzeugauftrag_.vonDatum),
								root_fa.get(Fahrzeugauftrag_.bisDatum))),
				criteriaBuilder.or(
						criteriaBuilder.between(root_fa.get(Fahrzeugauftrag_.vonDatum), fromDateParameter,
								untilDateParameter),
						criteriaBuilder.between(root_fa.get(Fahrzeugauftrag_.bisDatum), fromDateParameter,
								untilDateParameter))));
	
		TypedQuery<Fahrzeugauftrag> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(fromDateParameter, fromDate);
		query.setParameter(untilDateParameter, untilDate);
		return query.getResultList();
	}

	/**
	 * @queryMethod Do not edit, method is generated by editor!
	 */
	public List<Fahrzeugauftrag> findAllByVehicle(Fahrzeug fz) {
		EntityManager entityManager = em();
	
		CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
	
		ParameterExpression<Fahrzeug> fzParameter = criteriaBuilder.parameter(Fahrzeug.class, "fz");
	
		CriteriaQuery<Fahrzeugauftrag> criteriaQuery = criteriaBuilder.createQuery(Fahrzeugauftrag.class);
	
		Root<Fahrzeugauftrag> root_fa = criteriaQuery.from(Fahrzeugauftrag.class);
		root_fa.alias("fa");
	
		criteriaQuery.where(criteriaBuilder.equal(root_fa.get(Fahrzeugauftrag_.fahrzeug), fzParameter));
	
		TypedQuery<Fahrzeugauftrag> query = entityManager.createQuery(criteriaQuery);
		query.setParameter(fzParameter, fz);
		return query.getResultList();
	}
	
}